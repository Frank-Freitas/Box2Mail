name: Box2Mail - Diagnóstico Profundo

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/box2mail-diagnostico.yml"
      - "package.json"
      - "yarn.lock"
      - "pnpm-lock.yaml"
      - "pubspec.yaml"
      - "android/**"
      - "ios/**"
      - "App.*"
      - "src/**"
      - "lib/**"

jobs:
  diagnose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node (se existir package.json)
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: npm

      - name: Set up Java (Android)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter (se existir pubspec.yaml)
        if: hashFiles('pubspec.yaml') != ''
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Instalar utilitários
        run: |
          sudo apt-get update
          sudo apt-get install -y jq tree unzip
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_$(uname -s | tr '[:upper:]' '[:lower:]')_x64.tar.gz \
            | sudo tar -xz -C /usr/local/bin gitleaks

      - name: Rodar script de diagnóstico
        shell: bash
        run: |
          chmod +x scripts/repo_diagnostico.sh || true
          if [ ! -f scripts/repo_diagnostico.sh ]; then
            mkdir -p scripts
            cat > scripts/repo_diagnostico.sh <<'EOS'
#!/usr/bin/env bash
set -euo pipefail

mkdir -p .diagnostico
echo "## Box2Mail - Diagnóstico" > .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md
date -u +"Relatório gerado em: %Y-%m-%d %H:%M:%SZ" >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md

# 1) Mapa do repositório
tree -a -I ".git|node_modules|build|dist|.dart_tool|.gradle|.idea|Pods|DerivedData" > .diagnostico/REPO_TREE.txt || true
echo "### Estrutura de pastas" >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md
echo "\`\`\`" >> .diagnostico/DIAGNOSTICO.md
head -n 500 .diagnostico/REPO_TREE.txt >> .diagnostico/DIAGNOSTICO.md
echo "\`\`\`" >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md

# 2) Git (branches, tags, últimos commits)
{
  echo "### Git (histórico & branches)"
  echo ""
  echo "Branches:"
  git branch -a | sed 's/^/* /'
  echo ""
  echo "Tags:"
  git tag --sort=-creatordate | head -n 50 | sed 's/^/* /'
  echo ""
  echo "Últimos 20 commits:"
  git log --pretty=format:"* %h %ad %an — %s" --date=short -n 20
} > .diagnostico/GIT_SUMMARY.md || true
cat .diagnostico/GIT_SUMMARY.md >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md

# 3) Segurança (vazamento de segredos)
gitleaks detect --no-banner --report-format json --report-path .diagnostico/GITLEAKS.json || true
echo "### Segurança" >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md
if [ -s .diagnostico/GITLEAKS.json ]; then
  echo "Relatório Gitleaks gerado (possíveis segredos detectados)." >> .diagnostico/DIAGNOSTICO.md
else
  echo "Nenhum possível segredo detectado pelo Gitleaks." >> .diagnostico/DIAGNOSTICO.md
fi
echo "" >> .diagnostico/DIAGNOSTICO.md

# 4) Node / React Native / Expo
if [ -f package.json ]; then
  echo "### Node / RN / Expo" >> .diagnostico/DIAGNOSTICO.md
  echo "" >> .diagnostico/DIAGNOSTICO.md

  node -v | tee .diagnostico/NODE_VERSION.txt
  jq '.engines // {}' package.json > .diagnostico/ENGINES.json || echo "{}" > .diagnostico/ENGINES.json

  npm ci --prefer-offline --no-audit --fund=false || npm install --no-audit --fund=false

  npx --yes depcheck --json > .diagnostico/DEPCHECK.json || echo "{}" > .diagnostico/DEPCHECK.json
  npm outdated --json > .diagnostico/NPM_OUTDATED.json || echo "{}" > .diagnostico/NPM_OUTDATED.json
  npm audit --json --omit=dev > .diagnostico/NPM_AUDIT.json || echo "{}" > .diagnostico/NPM_AUDIT.json

  if [ -f tsconfig.json ]; then
    npx --yes tsc --noEmit > .diagnostico/TSC.txt 2>&1 || true
  fi

  # ESLint / Prettier (se existir config)
  if ls .eslintrc* .eslint.config.* >/dev/null 2>&1; then
    npx --yes eslint . -f json -o .diagnostico/ESLINT.json || true
  fi
  if [ -f .prettierrc ] || [ -f .prettier.config.* ]; then
    npx --yes prettier -c . > .diagnostico/PRETTIER.txt 2>&1 || true
  fi

  # RN / Expo específicos
  if jq -e '.dependencies["react-native"] // .devDependencies["react-native"]' package.json >/dev/null; then
    npx --yes react-native config > .diagnostico/RN_CONFIG.json || true
    # Android build rápido (debug) - sem testes/lint pra validar compilação básica
    if [ -d android ]; then
      pushd android
      ./gradlew --no-daemon assembleDebug -x lint -x test > ../.diagnostico/ANDROID_BUILD.txt 2>&1 || true
      popd
    fi
  fi

  if jq -e '.dependencies["expo"] // .devDependencies["expo"]' package.json >/dev/null; then
    npx --yes expo doctor --json > .diagnostico/EXPO_DOCTOR.json 2>&1 || true
  fi

  echo "- Node: $(cat .diagnostico/NODE_VERSION.txt)" >> .diagnostico/DIAGNOSTICO.md
  echo "- engines (package.json):" >> .diagnostico/DIAGNOSTICO.md
  jq -r 'to_entries[]?| "* \(.key): \(.value)"' .diagnostico/ENGINES.json >> .diagnostico/DIAGNOSTICO.md || true
  echo "" >> .diagnostico/DIAGNOSTICO.md
  echo "- Dependências desnecessárias (depcheck): ver .diagnostico/DEPCHECK.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- Desatualizações (npm outdated): ver .diagnostico/NPM_OUTDATED.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- Vulnerabilidades (npm audit): ver .diagnostico/NPM_AUDIT.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- TypeScript: ver .diagnostico/TSC.txt" >> .diagnostico/DIAGNOSTICO.md
  echo "- ESLint: ver .diagnostico/ESLINT.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- Prettier: ver .diagnostico/PRETTIER.txt" >> .diagnostico/DIAGNOSTICO.md
  echo "- RN config: ver .diagnostico/RN_CONFIG.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- Expo doctor: ver .diagnostico/EXPO_DOCTOR.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- Android build: ver .diagnostico/ANDROID_BUILD.txt" >> .diagnostico/DIAGNOSTICO.md
  echo "" >> .diagnostico/DIAGNOSTICO.md
fi

# 5) Flutter
if [ -f pubspec.yaml ]; then
  echo "### Flutter" >> .diagnostico/DIAGNOSTICO.md
  echo "" >> .diagnostico/DIAGNOSTICO.md
  flutter --version > .diagnostico/FLUTTER_VERSION.txt 2>&1 || true
  flutter doctor -v > .diagnostico/FLUTTER_DOCTOR.txt 2>&1 || true
  dart pub outdated --json > .diagnostico/DART_OUTDATED.json 2>&1 || echo "{}" > .diagnostico/DART_OUTDATED.json
  flutter analyze > .diagnostico/FLUTTER_ANALYZE.txt 2>&1 || true
  # build rápido de apk debug (se possível)
  if [ -d android ]; then
    flutter build apk --debug > .diagnostico/FLUTTER_BUILD_ANDROID.txt 2>&1 || true
  fi
  echo "- Versão Flutter: $(head -n 1 .diagnostico/FLUTTER_VERSION.txt || echo 'n/d')" >> .diagnostico/DIAGNOSTICO.md
  echo "- Doctor: ver .diagnostico/FLUTTER_DOCTOR.txt" >> .diagnostico/DIAGNOSTICO.md
  echo "- Desatualizações: ver .diagnostico/DART_OUTDATED.json" >> .diagnostico/DIAGNOSTICO.md
  echo "- Analyze: ver .diagnostico/FLUTTER_ANALYZE.txt" >> .diagnostico/DIAGNOSTICO.md
  echo "- Build Android: ver .diagnostico/FLUTTER_BUILD_ANDROID.txt" >> .diagnostico/DIAGNOSTICO.md
  echo "" >> .diagnostico/DIAGNOSTICO.md
fi

# 6) Maiores arquivos (p/ limpeza)
echo "### Maiores arquivos no repo (excluindo binários comuns)" >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md
git ls-files -z | xargs -0 du -h 2>/dev/null | sort -hr | head -n 50 > .diagnostico/LARGEST_FILES.txt || true
echo "\`\`\`" >> .diagnostico/DIAGNOSTICO.md
cat .diagnostico/LARGEST_FILES.txt >> .diagnostico/DIAGNOSTICO.md
echo "\`\`\`" >> .diagnostico/DIAGNOSTICO.md
echo "" >> .diagnostico/DIAGNOSTICO.md

# 7) Checklists finais
cat >> .diagnostico/DIAGNOSTICO.md <<'EOM'

### Checklists de ação rápida
- [ ] Remover dependências não usadas (depcheck).
- [ ] Atualizar pacotes críticos (npm/dart outdated) com atenção a breaking changes.
- [ ] Resolver vulnerabilidades de produção (npm audit).
- [ ] Corrigir lints e formatar (ESLint/Prettier ou flutter analyze/dart format).
- [ ] Garantir build Android debug OK (RN/Flutter).
- [ ] Verificar vazamento de segredos (Gitleaks).
- [ ] Revisar estrutura de pastas (REPO_TREE) e legados.
- [ ] Documentar versões suportadas (Node/Java/SDK/Flutter).

EOM
EOS
          fi
          bash scripts/repo_diagnostico.sh

      - name: Publicar artefatos
        uses: actions/upload-artifact@v4
        with:
          name: box2mail-diagnostico
          path: .diagnostico/
          if-no-files-found: error
